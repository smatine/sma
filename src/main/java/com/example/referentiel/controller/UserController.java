package com.example.referentiel.controller;

import com.example.referentiel.exception.ResourceNotFoundException;
import com.example.referentiel.model.Account;
import com.example.referentiel.model.Nacl;
import com.example.referentiel.model.Group;
import com.example.referentiel.model.User;

import com.example.referentiel.model.Subnet;
import com.example.referentiel.repository.AccountRepository;
import com.example.referentiel.repository.GroupRepository;
import com.example.referentiel.repository.UserRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.transaction.Transactional;
import javax.validation.Valid;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import java.util.List;
import java.util.Optional;

@RestController
@Transactional
public class UserController {

    @Autowired
    private UserRepository userRepository;

    @Autowired
    private AccountRepository accountRepository;
    
    @Autowired
    private GroupRepository groupRepository;

    @GetMapping("/accounts/{accountId}/users")
    public List<User> getUsersByProductId(@PathVariable Long accountId) {
        return userRepository.findByAccountId(accountId);
    }
    
    @GetMapping("/users")
    Collection<User> users() {
    	
        return userRepository.findAll();
    }
    
    @GetMapping("/users/{id}")
    ResponseEntity<?> getUser(@PathVariable Long id) {
        Optional<User> user = userRepository.findById(id);
        
        return user.map(response -> ResponseEntity.ok().body(response))
                .orElse(new ResponseEntity<>(HttpStatus.NOT_FOUND));
    }
    
    @PostMapping("/accounts/{accountId}/users")
    public User addUser(@PathVariable String accountId,
                            @Valid @RequestBody User user) {
    	
    	long prdId = Long.valueOf(accountId);
    	
    	List<Group> grps = user.getGroups();
    	List<Group> groups = new ArrayList<>();
    	Iterator<Group> it = grps.iterator();
    	while(it.hasNext()) {
    		Group gp = (Group)it.next();
    		Optional<Group> group = groupRepository.findById(gp.getId());
    	    group.get().getUsers().add(user);
    	    groups.add(group.get());
    	}
    	
        return accountRepository.findById(prdId)
                .map(account -> {
                	user.setGroups(groups);
                    user.setAccount(account);
                    User re = userRepository.save(user);
                	Iterator<Group> itt = groups.iterator();
                	while(itt.hasNext()) {
                		Group gp = (Group)itt.next();
                		groupRepository.save(gp);
                	}
                	
                    return re;
                    
                }).orElseThrow(() -> new ResourceNotFoundException("account not found with id " + accountId));         
    }
    
    @PutMapping("/accounts/{accountId}/users/{userId}")
    public User updateUser(@PathVariable Long accountId,
                               @PathVariable Long userId,
                               @Valid @RequestBody User userRequest) {
        if(!accountRepository.existsById(accountId)) {
            throw new ResourceNotFoundException("account not found with id " + accountId);
        }
        Optional<Account> account = accountRepository.findById(accountId);
        
        List<Group> grps = userRequest.getGroups();
    	List<Group> groups = new ArrayList<>();
    	Iterator<Group> it = grps.iterator();
    	while(it.hasNext()) {
    		Group gp = (Group)it.next();
    		Optional<Group> group = groupRepository.findById(gp.getId());
    	    group.get().getUsers().add(userRequest);
    	    groups.add(group.get());
    	}
        return userRepository.findById(userId)
                .map(user -> {
                	Iterator<Group> iti = user.getGroups().iterator();
                	while(iti.hasNext()) {
                		Group gp = (Group)iti.next();
                		gp.getUsers().remove(user);
                		groupRepository.save(gp);
                	}
                    user.setName(userRequest.getName());
                    
                    user.setProgrammaticAccess(userRequest.isProgrammaticAccess());
                    user.setConsoleAccess(userRequest.isConsoleAccess());
                    user.setRequirePasswordReset(userRequest.isRequirePasswordReset());
                    user.setAutogeneratedPassword(userRequest.isAutogeneratedPassword());
                    user.setCustomPassword(userRequest.getCustomPassword());
                    //
                    user.setAccount(account.get());
                    
                    user.setGroups(groups);
        
                    User re = userRepository.save(user);
                	Iterator<Group> itt = groups.iterator();
                	while(itt.hasNext()) {
                		Group gp = (Group)itt.next();
                		groupRepository.save(gp);
                	}
                	
                    return re;
                   
                }).orElseThrow(() -> new ResourceNotFoundException("User not found with id " + userId));
    }

    @DeleteMapping("/accounts/{accountId}/users/{userId}")
    public ResponseEntity<?> deleteUser(@PathVariable Long accountId,
                                          @PathVariable Long userId) {
        if(!accountRepository.existsById(accountId)) {
            throw new ResourceNotFoundException("account not found with id " + accountId);
        }
        return userRepository.findById(userId)
                .map(user -> {
                	Iterator<Group> iti = user.getGroups().iterator();
                	while(iti.hasNext()) {
                		Group gp = (Group)iti.next();
                		gp.getUsers().remove(user);
                		groupRepository.save(gp);
                	}
                    userRepository.delete(user);
                    return ResponseEntity.ok().build();
                }).orElseThrow(() -> new ResourceNotFoundException("User not found with id " + userId));

    }
}
