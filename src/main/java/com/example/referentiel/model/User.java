package com.example.referentiel.model;

import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

import io.swagger.annotations.ApiModelProperty;

import org.hibernate.annotations.OnDelete;
import org.hibernate.annotations.OnDeleteAction;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.*;
import javax.transaction.Transactional;
import javax.validation.constraints.Email;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;

@Entity
@Table(name = "users")
public class User extends AuditModel {
    @Id
    @GeneratedValue(generator = "user_generator")
    @SequenceGenerator(
            name = "user_generator",
            sequenceName = "user_sequence",
            initialValue = 1000
    )
    private Long id;

    @NotBlank
    @Column(unique=true, nullable=false) 
    private String name;
    
    private boolean programmaticAccess= false; 
    
    private boolean consoleAccess= false;
    
    private boolean requirePasswordReset = true;
    
    private boolean autogeneratedPassword = true;
    
    private String customPassword;
    
    @ManyToMany (fetch = FetchType.LAZY)
	@JoinTable(name = "user_group", 
    joinColumns = { @JoinColumn(name = "user_id", nullable = false, updatable = false) },
    inverseJoinColumns = { @JoinColumn(name = "group_id", nullable = false, updatable = false) })
    @OnDelete(action = OnDeleteAction.CASCADE)
	@JsonIgnoreProperties({ "users", "user", "policy", "policys"})
    private List<Group> groups = new ArrayList<>();

    @ManyToOne (fetch = FetchType.LAZY, optional = false)
    @JoinColumn(name = "account_id", nullable = false)
    @OnDelete(action = OnDeleteAction.CASCADE)
    private Account account;
    
    @ManyToMany(fetch = FetchType.LAZY, 
            mappedBy = "roles")
    @OnDelete(action = OnDeleteAction.CASCADE)
    @JsonIgnoreProperties({ "role", "roles", "account", "policy", "users", "storages"})
    private List<Kms> kmss = new ArrayList<>();
    
    
	public List<Kms> getKmss() {
		return kmss;
	}


	public void setKmss(List<Kms> kmss) {
		this.kmss = kmss;
	}


	public Long getId() {
		return id;
	}


	public void setId(Long id) {
		this.id = id;
	}


	public String getName() {
		return name;
	}


	public void setName(String name) {
		this.name = name;
	}


	public List<Group> getGroups() {
		return groups;
	}


	public void setGroups(List<Group> groups) {
		this.groups = groups;
	}


	public Account getAccount() {
		return account;
	}


	public void setAccount(Account account) {
		this.account = account;
	}


	public boolean isProgrammaticAccess() {
		return programmaticAccess;
	}


	public void setProgrammaticAccess(boolean programmaticAccess) {
		this.programmaticAccess = programmaticAccess;
	}


	public boolean isConsoleAccess() {
		return consoleAccess;
	}


	public void setConsoleAccess(boolean consoleAccess) {
		this.consoleAccess = consoleAccess;
	}


	public boolean isRequirePasswordReset() {
		return requirePasswordReset;
	}


	public void setRequirePasswordReset(boolean requirePasswordReset) {
		this.requirePasswordReset = requirePasswordReset;
	}


	public boolean isAutogeneratedPassword() {
		return autogeneratedPassword;
	}


	public void setAutogeneratedPassword(boolean autogeneratedPassword) {
		this.autogeneratedPassword = autogeneratedPassword;
	}


	public String getCustomPassword() {
		return customPassword;
	}


	public void setCustomPassword(String customPassword) {
		this.customPassword = customPassword;
	}
    
    
	
}
