import React, { Component } from 'react';
import { Link, withRouter } from 'react-router-dom';
import { Button, Container, Form, FormGroup, Input, Label, FormFeedback, FormText } from 'reactstrap';
import AppNavbar from './AppNavbar';
import Select from 'react-select';
import { API_BASE_URL, FRT_BASE_URL } from './constants';

class UserEdit extends Component {

  emptyItem = {
    name: '',
	  account: {},
    accounts: [],
  	accountId : '',
    groups: [],
    groupss: [],
    groupId: [],
    programmaticAccess: false, 
    consoleAccess: false,
    requirePasswordReset: true,
    autogeneratedPassword: true,
    customPassword: '',
    touched: {
      name: false,
      accountId: false,
      groupId: false,
      customPassword: false,
      programmaticAccess:false,
      consoleAccess:false
    }
  };

  constructor(props) {
    super(props);
    this.state = {
      item: this.emptyItem
    };
    this.handleChange = this.handleChange.bind(this);
    this.handleSubmit = this.handleSubmit.bind(this);
    this.handleBlur = this.handleBlur.bind(this);
  }

  async componentDidMount() {
    if (this.props.match.params.id !== 'new') {

      const user = await (await fetch(`${API_BASE_URL}/users/${this.props.match.params.id}`)).json();
      user.touched = {
        name: false,
        accountId: false,
        groupId: false,
        customPassword: false,
        programmaticAccess:false,
        consoleAccess:false
      };
      this.setState({item: user});

      let account={};
      await (await fetch(API_BASE_URL + "/accounts/" + user.account.id,)
      .then((result) => {
        return result.json();
      }).then((jsonResult) => {
        account = jsonResult;
        fetch(API_BASE_URL + '/accounts/' + (account.id) + '/groups',)
        .then((result) => { 
          return result.json();
        }).then((jsonResult) => {
          let item = {...this.state.item};
          item.groupss = jsonResult;
          this.setState({item: item});
        });
      }));
      
      let item = {...this.state.item};
      item.accountId = user.account.id;
      var values = [];
      item.groups.map(s => { 
        values.push({"id": s.id});
      });
      item.groups = values;
      
      this.setState({item: item});
      
    }
    else {
      const user = {
        name: '',
        account: {},
        accounts: [],
        accountId : '',
        groups: [],
        groupss: [],
        groupId: [],
        programmaticAccess: false,
        consoleAccess: false,
        requirePasswordReset: true,
        autogeneratedPassword: true,
        customPassword: '',
        touched: {
          name: false,
          accountId: false,
          groupId: false,
          customPassword: false,
          programmaticAccess:false,
          consoleAccess:false
        }
      };
      user.touched = {
          name: false,
          accountId: false,
          groupId: false,
          customPassword: false,
          programmaticAccess:false,
          consoleAccess:false
      };
      this.setState({item: user});
    }

    await fetch(API_BASE_URL + '/accounts',)
    .then((result) => {
      return result.json();
    }).then((jsonResult) => {
      let item = {...this.state.item};
      item.accounts = jsonResult;
      this.setState({item: item});
    })

  }

  handleChange(event) {
    const target = event.target;
    const value = target.value;
    const name = target.name;
    let item = {...this.state.item};
    item[name] = value;
    this.setState({item});
     
    if(name === 'programmaticAccess')
    {
      item.programmaticAccess = (target.checked) ? true: false;
    
    }
    if(name === 'consoleAccess')
    {
      item.consoleAccess = (target.checked) ? true: false;
    
    }
    if(name === 'requirePasswordReset')
    {
      item.requirePasswordReset = (target.checked) ? true: false;
    
    }
    if(name === 'type')
    {
      if(value === 'Auto'){
        item.autogeneratedPassword = true;
      }
      else
      {
        item.autogeneratedPassword = false;
      }
    }

    if(name === 'accountId')
    {

      let account={};
      fetch(API_BASE_URL + "/accounts/" + item.accountId,)
      .then((result) => {
        return result.json();
      }).then((jsonResult) => {
        account = jsonResult;
        fetch(API_BASE_URL + '/accounts/' + (account.id) + '/groups',)
        .then((result) => { 
          return result.json();
        }).then((jsonResult) => {
          let item = {...this.state.item};
          item.groupss = jsonResult;
          this.setState({item: item});
        });
      });

    }
  }

  async handleSubmit(event) {
    event.preventDefault();
    const {item} = this.state;

    item.touched = {
      name: true,
      accountId: true,
      groupId: true,
      customPassword: true,
      programmaticAccess:true,
      consoleAccess:true
    };
    const errors = this.validate(item.name, item.accountId, item.groupId, item.customPassword, item.programmaticAccess, item.consoleAccess);

    const isDisabled = Object.keys(errors).some(x => errors[x]);
    if(isDisabled) {
        this.forceUpdate();
        return;
    }
    
    const hist= FRT_BASE_URL + '/users'; 

    item.account={id: item.accountId};
    
    if(!item.consoleAccess)
    {
      //item.programmaticAccess = false;
      //item.consoleAccess: false;
      item.requirePasswordReset = true;
      item.autogeneratedPassword = true;
      item.customPassword  = '';
    }

    await fetch((item.id) ? API_BASE_URL + '/accounts/' + (item.account.id) + '/users/'+(item.id) : API_BASE_URL + '/accounts/' + item.account.id + '/users', {
      method: (item.id) ? 'PUT' : 'POST',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(item),
    });
    this.props.history.push(hist);
  }

  handleBlur = (field) => (evt) => {

    let item = {...this.state.item};
    item.touched= { ...this.state.item.touched, [field]: true};
    this.setState({item});

  }

  validate(name, accountId,  groupId, customPassword, programmaticAccess, consoleAccess) {

    const errors = {
      name: '' ,
      accountId: '',
      groupId: '',
      customPassword: '',
      programmaticAccess:'', 
      consoleAccess:''
    };
    

    if(this.state.item.touched.name && name.length === 0){
      errors.name = 'Name should not be null';
      return errors;
    }
    
    if(this.state.item.touched.accountId && accountId.length === 0){
      errors.accountId = 'Vpc should not be null';
      return errors;
    }

    if(this.state.item.consoleAccess && !this.state.item.autogeneratedPassword && this.state.item.touched.customPassword && customPassword.length === 0){
      errors.customPassword = 'customPassword should not be null';
      return errors;
    }

    if(!consoleAccess && !programmaticAccess) {
      
      errors.programmaticAccess = 'Choose between programmaticAccess and consoleAccess';
      errors.consoleAccess = 'Choose between programmaticAccess and consoleAccess';
      return errors;
    }

/*
    if(this.state.item.touched.groupId  && this.state.item.groups.length === 0){
      errors.groupId = 'Add groupId.';
      return errors;
    }
*/  
    return errors;
  }


  onOptionChange = (selectName,selectedOption) => {
      const {item} = this.state;
      var options = selectedOption;
      var values = [];
      if(selectName === 'groupId') 
      {
        for (var i = 0, l = options.length; i < l; i++) {      
          if(item.groupss && item.groupss.length){
              item.groupss.map(s => { 
                if(s.id == options[i].value) {
                    values.push({"id": s.id});
                }
            });
          }
        }
        item.groups = values;
      }
      
      this.setState({item});
  };


  render() {
    const {item} = this.state;
    const title = <h2>{item.id ? 'Edit User' : 'Add User'}</h2>;

    const errors = this.validate(item.name, item.accountId, item.groupId, item.customPassword, item.programmaticAccess, item.consoleAccess);
    const isDisabled = Object.keys(errors).some(x => errors[x]);
    
    const canc = FRT_BASE_URL + "/users";

    
    let opts = [];
    if(item.accounts && item.accounts.length){
      item.accounts.map(s => {  
          opts.push(<option value={s.id}>{s.id} {s.name}</option>);
      });
    }
    let account = item.accountId || '';
    item.accountId = account;

    let isUsed = false; 
    //if(item.id !== '' && (item.users && item.users.length !== 0)  ) isUsed = true; 
    
    let optsp = [];  
    let optsps = [];
    if(item.groupss && item.groupss.length){
      item.groupss.map(s => {  
          if(item.groups && item.groups.length) item.groups.map(ss => {
             if(s.id == ss.id) {
               optsp.push({value: s.id, label: s.name});
             }
          });
          optsps.push({value: s.id, label: s.name});
      });
    }

    const autogeneratedPassword = item.autogeneratedPassword;
    //console.log("item.autogeneratedPassword=" + item.autogeneratedPassword);

    const customPassword = (item.consoleAccess && !item.autogeneratedPassword) ? <FormGroup>
            <Label for="customPassword">Custom Password (*)</Label> 
            <Input type="text" name="customPassword" id="customPassword" value={item.customPassword || ''} placeholder="Enter customPassword" disabled={isUsed}
                   onChange={this.handleChange} onBlur={this.handleBlur('customPassword')} autoComplete="customPassword"
                   valid={errors.customPassword === ''}
                   invalid={errors.customPassword !== ''}
            />
           <FormText></FormText>
           <FormFeedback>{errors.customPassword}</FormFeedback>
          </FormGroup> : ''
    
    const requirePasswordReset = (item.consoleAccess === true) ? <FormGroup > 
            <Label for="requirePasswordReset">Require password reset</Label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <Input type="checkbox" name="requirePasswordReset" id="requirePasswordReset" 
                    onChange={this.handleChange} onBlur={this.handleBlur('requirePasswordReset')} 
                    checked={item.requirePasswordReset === true}/>
            
            <FormText>User must create a new password at next sign-in.</FormText>
          </FormGroup> : ''
    
    

    const consolePassword = (item.consoleAccess === true) ? <FormGroup tag="fieldset">
            <Label for="type">Health Check Type (*)</Label>
            <FormGroup check>
              <Label check>
                <Input type="radio" name="type" id="type" value="Auto" checked={autogeneratedPassword === true}
                       onChange={this.handleChange} onBlur={this.handleBlur('type')} autoComplete="type"
                       valid={errors.type === ''}
                       invalid={errors.type !== ''}
                />{' '}
                Autogenerated password
              </Label>
            </FormGroup>
            <FormGroup check>
              <Label check>
                <Input type="radio" name="type" id="type" value="Custom" checked={autogeneratedPassword === false}
                       onChange={this.handleChange} onBlur={this.handleBlur('type')} autoComplete="type"
                       valid={errors.type === ''}
                       invalid={errors.type !== ''}
                />{' '}
                Custom password
              </Label>
            </FormGroup>
            <FormFeedback>{errors.type}</FormFeedback>
          </FormGroup> : ''

    return <div>
      <AppNavbar/>
      <Container>
        {title}
 
        <Form onSubmit={this.handleSubmit}>
          <FormGroup>
            <Label for="name">Name (*)</Label> 
            <Input type="text" name="name" id="name" value={item.name || ''} placeholder="Enter name" disabled={isUsed}
                   onChange={this.handleChange} onBlur={this.handleBlur('name')} autoComplete="name"
                   valid={errors.name === ''}
                   invalid={errors.name !== ''}
            />
           <FormText></FormText>
           <FormFeedback>{errors.name}</FormFeedback>
          </FormGroup>

          <FormGroup>
            <Label for="accountId">Account (*)</Label>
            <Input type="select" name="accountId" id="accountId"  value={account} onChange={this.handleChange} onBlur={this.handleBlur('accountId')} disabled={isUsed}
                 valid={errors.accountId === ''}
                 invalid={errors.accountId !== ''}
            >
              <option value="" disabled>Choose</option>
              {opts}
            </Input>
            <FormFeedback>{errors.accountId}</FormFeedback>
          </FormGroup>


          <FormGroup>
            <Label for="groupId">Groups</Label>
            <Select name="groupId" id="groupId"  placeholder="Enter groupId" isMulti disabled={isUsed}
              value={optsp}
              onChange={e => this.onOptionChange("groupId",e)}
              onBlur={this.handleBlur('groupId')}
              options={optsps}

            />
            <FormFeedback>{errors.groupId}</FormFeedback> 
          </FormGroup>

          <FormGroup > 
            <Label for="programmaticAccess ">Programmatic access</Label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <Input type="checkbox" name="programmaticAccess" id="programmaticAccess" 
                    onChange={this.handleChange} onBlur={this.handleBlur('programmaticAccess')} 
                    checked={item.programmaticAccess === true}/>
            <FormFeedback>{errors.programmaticAccess}</FormFeedback> 
            <FormText>Enables an access key ID and secret access key for the AWS API, CLI, SDK, and other development tools.</FormText>
          </FormGroup>

          <FormGroup > 
            <Label for="consoleAccess">AWS Management Console access</Label>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
            <Input type="checkbox" name="consoleAccess" id="consoleAccess" 
                    onChange={this.handleChange} onBlur={this.handleBlur('consoleAccess')} 
                    checked={item.consoleAccess === true}/>
            <FormFeedback>{errors.consoleAccess}</FormFeedback> 
            <FormText>Enables a password that allows users to sign-in to the AWS Management Console.</FormText>
          </FormGroup>

          {consolePassword}
          {customPassword}
          {requirePasswordReset}
          
          



          <FormGroup>
            <Button color="primary" type="submit" disabled={isDisabled}>Save</Button>{' '}
            <Button color="secondary" tag={Link} to={canc}>Cancel</Button>
          </FormGroup>
        </Form>
      </Container>
    </div>
  }
}

export default withRouter(UserEdit);