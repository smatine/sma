import React, { Component } from 'react';
import { Button, ButtonGroup, Container, Table } from 'reactstrap';
import AppNavbar from './AppNavbar';
import { Link } from 'react-router-dom';
import { API_BASE_URL, FRT_BASE_URL } from './constants';

class UserList extends Component {

  constructor(props) {
    super(props);
    this.state = {users: [], isLoading: true};
    this.remove = this.remove.bind(this);
  }

  componentDidMount() {
    this.setState({isLoading: true});

    fetch(`${API_BASE_URL}/users`)
      .then(response => response.json())
      .then(data => this.setState({users: data, isLoading: false}));
  }

  async remove(accId, id) {
    await fetch(`${API_BASE_URL}/accounts/${accId}/users/${id}`, {
      method: 'DELETE',
      headers: {
        'Accept': 'application/json',
        'Content-Type': 'application/json'
      }
    }).then(() => {
      let updateUser = [...this.state.users].filter(i => i.id !== id);
      this.setState({users: updateUser});
    });
  }

  render() {
    const {users, isLoading} = this.state;

    if (isLoading) {
      return <p>Loading...</p>;
    }

    const userList = users.map(user => {
      
    const link = FRT_BASE_URL + "/accounts/" + user.account.id; 

    let groups='';    
    if(user.groups && user.groups.length){
        user.groups.map(t => {  
          groups = groups + t.id + ":" + t.name  + "| ";
      });
    }  
    let programmaticAccess = (user.programmaticAccess) ? 'Yes': 'No'; 
    let consoleAccess = (user.consoleAccess) ? 'Yes': 'No'; 
    let requirePasswordReset = (user.requirePasswordReset) ? 'Yes': 'No'; 
    let autogeneratedPassword = (user.autogeneratedPassword) ? 'Yes': 'No'; 
    

      return <tr key={user.id}>
        <td style={{whiteSpace: 'nowrap'}}>{user.id}</td> 
        <td>{user.name}</td>

        <td>{programmaticAccess}</td>
        <td>{consoleAccess}</td>
        <td>{requirePasswordReset}</td>
        <td>{autogeneratedPassword}</td>
        <td>{user.customPassword}</td>


        <td><a href={link}>{user.account.numAccount}</a></td>
        <td>{groups}</td>
        <td>
          <ButtonGroup>
            <Button size="sm" color="primary" tag={Link} to={FRT_BASE_URL + "/users/" + user.id}>Edit</Button>
            <Button size="sm" color="danger" onClick={() => this.remove(user.account.id, user.id)} >Delete</Button>
          </ButtonGroup>
        </td>
      </tr>

    });

    const add = `${FRT_BASE_URL}/users/new`;
  

    return (
      <div>
        <AppNavbar/>
        <Container fluid>
          <div className="float-right">
            <Button color="success" tag={Link} to={add}>Add User</Button>
          </div>
          
          <h3>User</h3>
          <Table className="mt-4">
            <thead>
            <tr>

              <th width="5%">Id</th> 
              <th width="5%">Name</th>

              <th width="5%">programmaticAccess</th>
              <th width="5%">consoleAccess</th>
              <th width="5%">requirePasswordReset</th>
              <th width="5%">autogeneratedPassword</th>
              <th width="5%">customPassword</th>

              <th width="5%">Account</th>
              <th width="5%">Groups</th>
			        <th width="5%">Actions</th>
            </tr>
            </thead>
            <tbody>
            {userList}
            </tbody>
          </Table>
        </Container>
      </div>
    );
  }
  
}

export default UserList;